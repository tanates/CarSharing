// <auto-generated />
using System;
using CarSharing.Server.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSharing.Server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSharing.Models.AuthorizationModels.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("CarSharing.Models.AuthorizationModels.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("CarSharing.Models.CarModels.CarBrandsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CarSharing.Models.CarModels.CarModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarBrandsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarBrandsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarLicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActiveCarRental")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarBrandsId");

                    b.ToTable("carModels");
                });

            modelBuilder.Entity("CarSharing.Models.Rental.ActiveCarRentalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarLicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CarRentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CarRentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PriceForAllTime")
                        .HasColumnType("float");

                    b.Property<bool>("StartAndEndRental")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarRentals");
                });

            modelBuilder.Entity("CarSharing.Models.Rental.RentalHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarLicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndRentalDateHistory")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PriceAllTime")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartRentalDateHistory")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("carRentalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("carRentalId");

                    b.ToTable("RentalHistory");
                });

            modelBuilder.Entity("CarSharing.Models.UserModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Moderator"
                        });
                });

            modelBuilder.Entity("CarSharing.Models.UserModels.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ActivatedAccount")
                        .HasColumnType("bit");

                    b.Property<string>("DriversLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UserBalance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarSharing.Models.CarModels.CarModelEntity", b =>
                {
                    b.HasOne("CarSharing.Models.CarModels.CarBrandsEntity", "CarBrands")
                        .WithMany("Cars")
                        .HasForeignKey("CarBrandsId");

                    b.Navigation("CarBrands");
                });

            modelBuilder.Entity("CarSharing.Models.Rental.ActiveCarRentalEntity", b =>
                {
                    b.HasOne("CarSharing.Models.CarModels.CarModelEntity", "Car")
                        .WithMany("carRentals")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarSharing.Models.Rental.RentalHistoryEntity", b =>
                {
                    b.HasOne("CarSharing.Models.UserModels.UserEntity", "User")
                        .WithMany("carRentalsHistory")
                        .HasForeignKey("UserId");

                    b.HasOne("CarSharing.Models.Rental.ActiveCarRentalEntity", "carRental")
                        .WithMany("rentalHistories")
                        .HasForeignKey("carRentalId");

                    b.Navigation("User");

                    b.Navigation("carRental");
                });

            modelBuilder.Entity("CarSharing.Models.UserModels.UserEntity", b =>
                {
                    b.HasOne("CarSharing.Models.UserModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarSharing.Models.CarModels.CarBrandsEntity", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarSharing.Models.CarModels.CarModelEntity", b =>
                {
                    b.Navigation("carRentals");
                });

            modelBuilder.Entity("CarSharing.Models.Rental.ActiveCarRentalEntity", b =>
                {
                    b.Navigation("rentalHistories");
                });

            modelBuilder.Entity("CarSharing.Models.UserModels.UserEntity", b =>
                {
                    b.Navigation("carRentalsHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
